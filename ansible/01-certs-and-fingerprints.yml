---

- hosts: all
  gather_facts: yes
  tasks:

  # ------- GENERATE NEW PUBLIC KEY AND EXPORT IT TO OTHER MACHINES

  - name: Generate a new ssh key pair on ~/.ssh/id_rsa
    shell: rm ~/.ssh/id_rsa -f && ssh-keygen -q -b 2048 -t rsa -N "" -C "ansible@{{inventory_hostname}}" -f ~/.ssh/id_rsa

  - name: Store locally in ansible controller the public key (non-nfs hosts)
    fetch:
      src: "~/.ssh/id_rsa.pub"
      dest: ".buffer/{{inventory_hostname}}-id_rsa.pub"
      flat: yes
    when: "{{ not inventory_hostname | regex_search('^nfs.*$') }}"

  - name: Ensure there is no previous entries in authorized keys for each host
    lineinfile: dest=~/.ssh/authorized_keys
                state=absent
                search_string="{{ item }}"
    loop: "{{ groups['all'] }}"

  - name: Copy public key to each others authorized_keys file using Ansible module
    authorized_key:
      user: ansible
      state: present
      key: "{{ lookup('file','.buffer/{{item}}-id_rsa.pub')}}"
    when: "{{ item != inventory_hostname }}"
    loop: "{{ [groups['workers'],groups['master']] | flatten(1) }}" #This takes two lists and unifies them as only one

  # ------- GENERATE NEW HOST FINGERPRINT AND SHARE TO OTHER HOSTS (to trust them)

  - name: Generate a new ssh ecdsa key on /etc/ssh/ssh_host_ecdsa_key
    become: true
    shell: >
            rm /etc/ssh/ssh_host_ecdsa_key -f && \
             ssh-keygen -q -b 521 -t ecdsa -N "" -C "ansible@{{inventory_hostname}}" -f /etc/ssh/ssh_host_ecdsa_key && \
             more /etc/ssh/ssh_host_ecdsa_key.pub
            # ssh-keygen -l -f /etc/ssh/ssh_host_ecdsa_key | cut -d' ' -f 2
    register: result

  - name: Store locally cmd output (fingerprint)
    local_action: copy content="{{result.stdout}}" dest=".buffer/{{inventory_hostname}}-ssh_host_ecdsa_key.pub"

  - name: Ensure there is no previous entries in authorized keys for each host (non-nfs hosts)
    lineinfile: dest=~/.ssh/known_hosts
                state=absent
                search_string="{{ item }}"
    when: "{{ not inventory_hostname | regex_search('^nfs.*$') }}"
    loop: "{{ groups['all'] }}"


  - name: Copy fingerprint to known_hosts file using Ansible module to each other, connections with default port (non-nfs hosts)
    shell: |
      echo "{{item}} {{ lookup('file','.buffer/{{item}}-ssh_host_ecdsa_key.pub')}}\n{{ hostvars[item].ansible_host }} {{ lookup('file','.buffer/{{item}}-ssh_host_ecdsa_key.pub')}}" >> ~/.ssh/known_hosts
    when:
    - "{{ item != inventory_hostname }}"
    - "{{hostvars[item].ansible_port | default('22') == '22' }}"
    loop: "{{ [groups['all']] | flatten(1) }}" #This takes two lists and unifies them as only one

  - name: Copy fingerprint to known_hosts file using Ansible module to each other, other than default (non-nfs hosts)
    shell: |
      echo "[{{item}}]:{{ hostvars[item].ansible_port}} {{ lookup('file','.buffer/{{item}}-ssh_host_ecdsa_key.pub')}}\n[{{ hostvars[item].ansible_host }}]:{{ hostvars[item].ansible_port}} {{ lookup('file','.buffer/{{item}}-ssh_host_ecdsa_key.pub')}}" >> ~/.ssh/known_hosts
    when:
    - "{{ item != inventory_hostname }}"
    - "{{hostvars[item].ansible_port | default('22') != '22' }}"
    loop: "{{ [groups['all']] | flatten(1) }}" #This takes two lists and unifies them as only one